// Global definition of the time interval
# define LINE_SENSOR_UPDATE 100
# define MOTOR_UPDATE       2000
unsigned long leftLS;
unsigned long centreLS;
unsigned long rightLS;
unsigned long motor_ts = 0;  
unsigned long ls_ts = 0;

void setup() 
{
  // LineSensor setup code
 # define LS_LEFT_IN_PIN   A0
  # define LS_CENTRE_IN_PIN A2
  # define LS_RIGHT_IN_PIN A3
  # define NB_LS_PINS 3
  # define IR_LED_POWER 11
  pinMode(LS_LEFT_IN_PIN, INPUT);
  pinMode(LS_CENTRE_IN_PIN, INPUT);
  pinMode(LS_RIGHT_IN_PIN, INPUT);
  pinMode(IR_LED_POWER, OUTPUT);
  digitalWrite(IR_LED_POWER, HIGH);
  Serial.begin(9600);
  delay(1000);
  Serial.println("***RESET***");
 
  // Motors setup
  // activating the pins i need for motors
  # define L_PWM_PIN 10
  # define L_DIR_PIN 16
  # define R_PWM_PIN 9
  # define R_DIR_PIN 15
  // setting forward and backward to low/high
  # define FWD LOW
  # define REV HIGH
  # define R_DIR_PIN 15
  # define BUZZER_PIN 6
  // setting all motors as outputs
  pinMode(L_PWM_PIN, OUTPUT);
  pinMode(L_DIR_PIN, OUTPUT);
  pinMode(R_PWM_PIN, OUTPUT);
  pinMode(R_DIR_PIN, OUTPUT);
  // Set initial power values for the PWM
  analogWrite( L_PWM_PIN, 0 );
  analogWrite( R_PWM_PIN, 0 );
}

void parallelLineSensorRead()
{ 
  // defines ls_pin and which variables
  int ls_pin[NB_LS_PINS] = { LS_LEFT_IN_PIN, LS_CENTRE_IN_PIN, LS_RIGHT_IN_PIN };
  int which=0;

  unsigned long sensor_read[NB_LS_PINS];
  for(which; which<NB_LS_PINS; which++)
  {
    sensor_read[which] = 0;
  } 
  // chargers capacitors via for loop to go through each sensor
  for( which = 0; which < NB_LS_PINS; which++ ) 
  {
    pinMode( ls_pin[which], OUTPUT );
    digitalWrite( ls_pin[which], HIGH );
  } // end of for loop
  delayMicroseconds(10);
  pinMode( ls_pin[0], INPUT);
  pinMode( ls_pin[1], INPUT);
  pinMode( ls_pin[2], INPUT);
  
  // We still need to record the start time.
  unsigned long start_time;
  start_time = micros();

  // This time, let's use a count to check how
  // many sensors have finished reading.  Let's
  // set it to NB_LS_PINS (3), and count down to
  // zero.  Therefore, remaining == 0 will mean all
  // sensors complete. 
  int remaining = NB_LS_PINS;

  // While we still have sensors to read.
  while( remaining > 0 ) 
  {
    // Whilst we are not done, we repeatedly attempt
    // to read the sensors.  We read the sensors in
    // a loop.  "which" will be 0,1,2 before moving on
    // with the code in this while loop.
    for( which = 0; which < NB_LS_PINS; which++ ) 
    {
      
      // We can instruct a digitalRead() using our
      // array variable to drop in the correct pin
      // number.  Here, "which" is incrementing
      // 0, 1, 2, looking up the pin value inside
      // ls_pin[]. 
      // Here, if digitalRead() returns LOW, it means
      // this sensor has completed.  
      if( digitalRead( ls_pin[which] ) == LOW ) 
      {
        //Serial.println(which);
        // Check if this sensor has had a previous
        // value of elapsed time stored before.
        // We only want to store the EARLIEST 
        // elapsed time, not store subsequent values.

        //OWEN: sensor_read[which] == 0 is the section the loop is not getting into
        //which is confusing because i think it is the same as mine which does work
        
        if( sensor_read[which] == 0 ) 
        {
          // record the elapsed time on this iteration
          // of the while() loop as the completion time
          // for this sensor
          unsigned long current_time;
          current_time = micros();
          
          //OWEN: adding an extra step to calculate elapsed time
          unsigned long elapsed_time = current_time - start_time;       
          sensor_read[which] = elapsed_time;         
          

          // Inside this if() means it is the first
          // and only time this sensor ("which") will
          // be updated.  Therefore, we reduce the 
          // "remaining" count toward 0.
          // Therefore, each decrement corresponds to
          // a unique sensor.
          remaining = remaining - 1;
        } // end of if sensor_read[which]
      } // end of if( digitalRead() )
    } // end of for() looping through each sensor.
  } // end of while( remaining > 0 )
  for (int i = 0; i < NB_LS_PINS; i++ )
  {
    Serial.print(sensor_read[i]);
    Serial.print(", ");  
  }// end of for int i
  Serial.print("\n");
}  // end of parallel read

 
void motorFoward()
{
  digitalWrite(L_DIR_PIN, FWD);
  digitalWrite(R_DIR_PIN, FWD);
  analogWrite( L_PWM_PIN, 20 );
  analogWrite( R_PWM_PIN, 20 );
}

void motorReverse()
{
  digitalWrite(L_DIR_PIN, REV);
  digitalWrite(R_DIR_PIN, REV);
  analogWrite( L_PWM_PIN, 20 );
  analogWrite( R_PWM_PIN, 20 );
}

void loop() 
{
  // put your main code here, to run repeatedly:

  // Record the time of this execution
  // of loop for coming calucations
  //  ( _ts = "time-stamp" )
  unsigned long current_ts;
  current_ts = millis();


  // Run our line sensor update
  // every 100ms (10hz).
  // Tracking time for the line sensor (ls)
  unsigned long elapsed_t;
  elapsed_t = current_ts - ls_ts;
  if( elapsed_t > LINE_SENSOR_UPDATE ) 
  {
    // Conduct a read of the line sensors
    parallelLineSensorRead();

    // Record when this execution happened.
    // for future iterations of loop()
    ls_ts = millis();
  }

  // Just to test this process:
  // Alternate the motor activation 
  // every 2 seconds so that the 3Pi+
  // drives fowards, then backwards.
  elapsed_t = current_ts - motor_ts;
  if( elapsed_t > MOTOR_UPDATE ) 
  {
    // Toggle motor direction
    // ...
    motorReverse();
    motorFoward();
    // Write motor direction and
    // pwm to motors.
    // ...
    motorReverse();
    // Record when this execution happened
    // for future iterations of loop()
    motor_ts = millis();

  }
}
